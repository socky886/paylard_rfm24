C51 COMPILER V9.56.0.0   UART                                                              12/30/2019 10:13:14 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN ..\OBJ\uart.obj
COMPILER INVOKED BY: D:\ProgramFiles\keil\C51\BIN\C51.EXE ..\HARDWARE\UART\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\HAR
                    -DWARE\NRF24L01;..\HARDWARE\SPI;..\SYS\delay;..\SYS\sys;..\HARDWARE\LED;..\HARDWARE\UART;..\HARDWARE\KEY) DEBUG OBJECTEXT
                    -END PRINT(..\OBJ\uart.lst) OBJECT(..\OBJ\uart.obj)

line level    source

   1          #include "uart.h"
   2          
   3          
   4          
   5          #define ILEN               16               //输出缓冲区的大小
   6          #define OLEN               16               //输出缓冲区的大小
   7          
   8          extern idata char    outbuf[OLEN];          //发送缓冲区的存储
   9          extern idata uchar   ostart       ;         //发送缓冲区起始索引
  10          extern idata uchar   oend            ;      //发送缓冲区起始索引
  11          extern bit           sendfull       ;       //标志-：标识发送缓冲区满
  12          extern bit           sendactive     ;       //标志：标识发送器激活
  13          
  14          extern idata char    inbuf[ILEN];           //发送缓冲区的存储
  15          extern idata uchar   istart         ;       //发送缓冲区起始索引
  16          extern idata uchar   iend            ;      //发送缓冲区起始索引
  17          extern bit inempty;
  18          
  19          
  20          //==================================================================
  21          //================          串口初始化        ======================
  22          //==================================================================
  23          
  24          void uart_init(void)
  25          {
  26   1      //      ulong temp1,temp2;
  27   1      
  28   1              P3M1 &= 0xFC;
  29   1              P3M1 |= 0x02;   //0000 0010  p3.0 RX 高阻输入 / p3.1推挽输出
  30   1              
  31   1              P3M0 &= 0xFC;
  32   1          P3M0 |= 0x05;   //0000 0101
  33   1              
  34   1              
  35   1              PCON = 0x80;   //SMOD  -  -  - GF1 GF0 PD IDL
  36   1                         //SMOD串口波特率加倍位，1--加倍
  37   1      
  38   1          SCON = 0x50;   //SM0  SM1  SM2 REN  TB8 RB8  TI RI
  39   1                         //SM0,SM1 模式选择：00-8位移位寄存器，      01-10位异步(定时器1波特率可调)
  40   1                         //                  10-11位异步(f/32或f/64) 11-11位异步(定时器1波特率可调)
  41   1                         //SM2 ：            1-只有RB8为1，RI才置位     0-接收到字符RI就置位
  42   1                         //REN：             1-允许串行口接收  0-禁止串行口接收
  43   1                         //TB8,RB9：         发送/接收的第9位数据
  44   1                         //TI：              发送完成中断标志位
  45   1                         //RI:               接收完成中断标志位
  46   1                         //方式1,禁止接收
  47   1      
  48   1          TMOD = 0x20;   //       T1/C1        |         T0/C0
  49   1                         //GATE  C/T反  M1  M0   GATE  C/T反   M1  M0
  50   1                         //GATE:   1-双重启动控制，TR0/TR1+INT0/INT1   0-TR0/TR1控制
  51   1                         //C/T反： 1-Couter   0-Timer
  52   1                         //M1,M0:  00-13位定时/计数器  TL低5位，TH高8位
  53   1                         //        01-16位定时器
C51 COMPILER V9.56.0.0   UART                                                              12/30/2019 10:13:14 PAGE 2   

  54   1                         //        10-常数自动装入的8位定时器/计数器
  55   1                         //        11-仅属于T/C0的两个8为定时器，计数器
  56   1                         //定时器1 定时方式2，作为串口波特率时钟
  57   1      
  58   1          TH1 = (uchar)( 256 - (XTAL/(16L*T*BAUDRATE)));  //T=6 双倍速 T=12 单倍速
  59   1                       //方式1 Baudrate formula:(2^SMOD/32)*(T1溢出率)
  60   1                       //T1溢出率 formula： SYSclk/12/(256 - TH1)->SYSclk/(12*(256 - TH1))
  61   1              //TH0 = 0;
  62   1              /*temp1 = 16L*T*BAUDRATE;       //除数
  63   1              temp2 = XTAL%temp1;             //余数
  64   1              temp1 = temp1 /2;                       //除数的1/2
  65   1              
  66   1      
  67   1              if(temp2 > temp1 )                      //补偿TH1少减的数
  68   1              {
  69   1                      TH1--;
  70   1              }
  71   1                                 */
  72   1          TR1 = 1;                                       //启动定时器T1
  73   1              ES = 1;
  74   1      }
  75          
  76          //==================================================================
  77          //================        串口中断程序        ======================
  78          //==================================================================
  79          
  80          static void com_isr(void) interrupt 4 using 1
  81          {
  82   1          char ch0;
  83   1          if(TI != 0)
  84   1          {
  85   2              TI = 0;    
  86   2             
  87   2              if(ostart != oend)                              //若字符在缓冲区
  88   2              {
  89   3                     
  90   3                      SBUF     = outbuf[ostart++ & (OLEN-1)]; //发送字符
  91   3                      sendfull = 0;                           //清零sendfull标志
  92   3      
  93   3              }
  94   2              else                                            //若所有字符发送完成
  95   2              {
  96   3                      sendactive = 0;                         //清零sendactive
  97   3              }
  98   2          }
  99   1          if(RI)
 100   1          {   
 101   2              ch0 = SBUF;
 102   2              RI = 0;
 103   2              if (istart + ILEN != iend) 
 104   2              {
 105   3                inbuf[iend++ & (ILEN-1)] = ch0;
 106   3                inempty = 0;
 107   3              }        
 108   2          }
 109   1      }
 110          
 111          char _getkey (void)  {
 112   1        if (iend == istart)
 113   1        {
 114   2            inempty = 1;
 115   2           
C51 COMPILER V9.56.0.0   UART                                                              12/30/2019 10:13:14 PAGE 3   

 116   2          //itask = os_running_task_id ();    /* set input task number                */
 117   2          //os_wait (K_SIG, 0, 0);            /* RTX-51 call: wait for signal         */
 118   2          //itask = 0xff;                     /* clear input task number              */
 119   2         //   return 0;
 120   2        }
 121   1        return (inbuf[istart++ & (ILEN-1)]);
 122   1      }
 123          
 124          
 125          
 126          
 127          //=================================================================
 128          //写字符到SBUF或发送缓冲区
 129          //=================================================================
 130          void putbuf(char c)
 131          {
 132   1        
 133   1              if(!sendfull)                                         //若缓冲区未满则发送
 134   1          {
 135   2              if(!sendactive)                                   //若发送器未激活
 136   2              {
 137   3                  sendactive = 1;                               //则直接送第一个字符到SBUF，激活发送器
 138   3                  SBUF       = c;                               //启动发送
 139   3               }
 140   2              else
 141   2              {
 142   3                //  ES = 0;                                             //关串口中断
 143   3                  outbuf[ oend++  & (OLEN-1) ] = c;                   //放字符到发送缓冲区
 144   3                  if (  ( (oend ^ ostart)  & (OLEN-1))  == 0 )
 145   3                  {
 146   4                      sendfull = 1;                                   //缓冲区满，置位sendfull标志
 147   4                  }                                                   //开串口中断
 148   3                 // ES = 1;
 149   3              }
 150   2          }
 151   1      }
 152          
 153          //=========================================
 154          //    printf()使用putchar()输出一个字符
 155          //=========================================
 156          char putchar(char c)
 157          {
 158   1             /* if(c == '\n')
 159   1              {
 160   1                    putbuf(0x0D);                                 //在LF前发送CR
 161   1              }*/
 162   1                      
 163   1                      while(sendfull)
 164   1                      {
 165   2                      ;
 166   2                      }
 167   1              if(c == '\n')
 168   1              {
 169   2                 putbuf(0x0D);                                 //在LF前发送CR
 170   2              }          
 171   1              putbuf(c);                                          //把字符放入缓冲区
 172   1              return(c);
 173   1      
 174   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.56.0.0   UART                                                              12/30/2019 10:13:14 PAGE 4   

   CODE SIZE        =    184    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
